"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var z_http_error_reply_1 = require("./z-http-error-reply");
var z_http_error_1 = require("./z-http-error");
var z_util_1 = require("../../utils/z.util");
var z_http_reply_default_1 = require("./z-http-reply-default");
var z_log_util_1 = require("../../utils/z-log.util");
var ZHttpService = (function () {
    function ZHttpService() {
    }
    ZHttpService.prototype.get = function (url, zOption, result) {
        zOption = zOption || {};
        zOption.type = 'GET';
        zOption.url = url || zOption.url;
        zOption.result = result || zOption.result;
        return this.request(zOption);
    };
    ZHttpService.prototype.post = function (url, zOption, result) {
        zOption = zOption || {};
        zOption.type = 'POST';
        zOption.url = url || zOption.url;
        zOption.result = result || zOption.result;
        return this.request(zOption);
    };
    ZHttpService.prototype.getMultiRequest = function (requestMulti) {
        if (requestMulti.option && requestMulti.option.length > 0) {
            requestMulti.option.forEach(function (value) { return value.type = 'GET'; });
        }
        return this.requestMulti(requestMulti);
    };
    ZHttpService.prototype.postMultiRequest = function (requestMulti) {
        if (requestMulti.option && requestMulti.option.length > 0) {
            requestMulti.option.forEach(function (value) { return value.type = 'POST'; });
        }
        return this.requestMulti(requestMulti);
    };
    ZHttpService.prototype.requestMulti = function (multiRequestOption) {
        var obArray = [];
        multiRequestOption = multiRequestOption || {};
        if (!multiRequestOption.isHideLoading) {
            wx.showLoading({
                title: multiRequestOption.loadingMsg || '',
            });
        }
        if (multiRequestOption.option && multiRequestOption.option.length > 0) {
            for (var _i = 0, _a = multiRequestOption.option; _i < _a.length; _i++) {
                var request = _a[_i];
                request.result = request.result || {};
                obArray.push(this.requestObservable(request));
            }
        }
        return Promise.all(obArray)
            .then(function (obj) {
            wx.hideLoading({});
            for (var i = 0; i < obj.length; i++) {
                var item = obj[i];
                if (multiRequestOption.option[i] && multiRequestOption.option[i].result) {
                    if (multiRequestOption.option[i].result.success) {
                        multiRequestOption.option[i].result.success(item);
                    }
                    if (multiRequestOption.option[i].result.complete) {
                        multiRequestOption.option[i].result.complete();
                    }
                }
            }
        })
            .catch(function (error) {
            wx.hideLoading({});
            for (var i = 0; i < multiRequestOption.option.length; i++) {
                if (multiRequestOption.option[i] && multiRequestOption.option[i].result) {
                    if (multiRequestOption.option[i].result.error) {
                        multiRequestOption.option[i].result.error(error);
                    }
                    if (multiRequestOption.option[i].result.complete) {
                        multiRequestOption.option[i].result.complete();
                    }
                }
            }
        });
    };
    ZHttpService.prototype.request = function (zOption) {
        var _this = this;
        zOption.result = zOption.result || {};
        if (!zOption.isHideLoading) {
            wx.showLoading({
                title: zOption.loadingMsg || '',
            });
        }
        return this.requestObservable(zOption)
            .then(function (resolve, reject) { return _this.successResult(zOption.result); })
            .catch(this.errorResult(zOption.result));
    };
    ZHttpService.prototype.requestObservable = function (zOption) {
        var _this = this;
        zOption.type = zOption.type || 'POST';
        zOption.header = this.processHeader(zOption.header);
        zOption.zreply = zOption.zreply || new z_http_reply_default_1.ZHttpReplyDefault();
        z_log_util_1.ZLogUtil.log("\n===================================================================");
        z_log_util_1.ZLogUtil.log("ADDR:" + zOption.url);
        z_log_util_1.ZLogUtil.log(zOption.body ? "APPLY:" + JSON.stringify(zOption.body) : "");
        return new Promise(function (resolve, reject) {
            var requestTask = wx.request({
                url: zOption.url || '',
                data: zOption.body,
                header: zOption.header,
                method: zOption.type,
                success: function (res) {
                    _this.processResponse(zOption.zreply, res, zOption.isHideLoading);
                },
                fail: function (error) {
                    _this.processCatch(zOption.isHideToastError, error);
                }
            });
            resolve(requestTask);
        });
    };
    ZHttpService.prototype.processHeader = function (header) {
        if (!header) {
            header = {};
        }
        header['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';
        return header;
    };
    ZHttpService.prototype.processResponse = function (zreply, res, isHideLoading, resolve, reject) {
        var jsonObj = res;
        z_log_util_1.ZLogUtil.log("===================================================================");
        z_log_util_1.ZLogUtil.log("REPLY:" + JSON.stringify(jsonObj));
        if (zreply) {
            if (zreply.isSuccess(jsonObj[zreply.codeKey])) {
                if (jsonObj[zreply.dataKey]) {
                    resolve(jsonObj[zreply.dataKey]);
                }
                else {
                    resolve(jsonObj);
                }
                return;
            }
            if (!zreply.isSuccess(jsonObj[zreply.codeKey]) && (jsonObj[zreply.codeKey] || jsonObj[zreply.msgKey])) {
                reject(this.processCatch(isHideLoading, new z_http_error_1.ZHttpError(jsonObj.code, jsonObj.msg)));
            }
            else {
                reject(this.processCatch(isHideLoading, new z_http_error_1.ZHttpError(1001, "数据不符合规范：\n" + JSON.stringify(res))));
            }
        }
    };
    ZHttpService.prototype.processCatch = function (isHideToastError, error) {
        var errorObj;
        if (error instanceof z_http_error_1.ZHttpError || (z_util_1.ZUtil.isValid(error.code) && z_util_1.ZUtil.isValid(error.errMsg))) {
            errorObj = this.getErrorReply(error.errMsg, error.code);
        }
        else {
            errorObj = this.getErrorReply(error.errMsg, -1);
        }
        if (!isHideToastError) {
            var msg = z_util_1.ZUtil.isValid(errorObj.code) ? errorObj.msg + "(" + errorObj.code + ")" : errorObj.msg;
            wx.showToast({
                title: msg || '',
            });
        }
        return errorObj;
    };
    ZHttpService.prototype.getErrorReply = function (message, code) {
        var errorObj = new z_http_error_reply_1.ZHttpErrorReply();
        errorObj.code = code;
        errorObj.msg = (message == null) ? "null" : message;
        return errorObj;
    };
    ZHttpService.prototype.successResult = function (result) {
        return function (obj) {
            wx.hideLoading({});
            if (result.success) {
                result.success(obj);
            }
            if (result.complete) {
                result.complete();
            }
        };
    };
    ZHttpService.prototype.errorResult = function (result) {
        return function (error) {
            wx.hideLoading({});
            if (result.error) {
                result.error(error);
            }
            if (result.complete) {
                result.complete();
            }
        };
    };
    return ZHttpService;
}());
exports.ZHttpService = ZHttpService;
//# sourceMappingURL=data:application/json;base64,