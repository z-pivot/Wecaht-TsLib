"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var z_http_error_reply_1 = require("./z-http-error-reply");
var z_http_error_1 = require("./z-http-error");
var z_util_1 = require("../z.util");
var z_http_reply_default_1 = require("./z-http-reply-default");
var z_log_util_1 = require("../z-log.util");
var ZHttp = (function () {
    function ZHttp() {
    }
    ZHttp.get = function (url, zOption, result) {
        zOption = zOption || {};
        zOption.type = 'GET';
        zOption.url = url || zOption.url;
        zOption.result = result || zOption.result;
        return ZHttp.request(zOption);
    };
    ZHttp.post = function (url, zOption, result) {
        zOption = zOption || {};
        zOption.type = 'POST';
        zOption.url = url || zOption.url;
        zOption.result = result || zOption.result;
        return ZHttp.request(zOption);
    };
    ZHttp.getMultiRequest = function (requestMulti) {
        if (requestMulti.option && requestMulti.option.length > 0) {
            requestMulti.option.forEach(function (value) { return value.type = 'GET'; });
        }
        return ZHttp.requestMulti(requestMulti);
    };
    ZHttp.postMultiRequest = function (requestMulti) {
        if (requestMulti.option && requestMulti.option.length > 0) {
            requestMulti.option.forEach(function (value) { return value.type = 'POST'; });
        }
        return ZHttp.requestMulti(requestMulti);
    };
    ZHttp.requestMulti = function (multiRequestOption) {
        var _this = this;
        var obArray = [];
        var task = [];
        multiRequestOption = multiRequestOption || {};
        if (!multiRequestOption.isHideLoading) {
            wx.showLoading({
                title: multiRequestOption.loadingMsg || '',
            });
        }
        if (multiRequestOption.option && multiRequestOption.option.length > 0) {
            var _loop_1 = function (request) {
                request.result = request.result || {};
                obArray.push(new Promise(function (resolve, reject) {
                    task.push(_this.request(request, resolve, reject));
                }));
            };
            for (var _i = 0, _a = multiRequestOption.option; _i < _a.length; _i++) {
                var request = _a[_i];
                _loop_1(request);
            }
        }
        return Promise.all(obArray)
            .then(function (resArr) {
            if (!multiRequestOption.isHideLoading) {
                wx.hideLoading({});
            }
            for (var i = 0; i < resArr.length; i++) {
                var item = resArr[i];
                if (multiRequestOption.option[i] && multiRequestOption.option[i].result) {
                    if (multiRequestOption.option[i].result.success) {
                        multiRequestOption.option[i].result.success(item);
                    }
                    if (multiRequestOption.option[i].result.complete) {
                        multiRequestOption.option[i].result.complete();
                    }
                }
            }
            return Promise.resolve(task);
        })
            .catch(function (error) {
            wx.hideLoading({});
            for (var i = 0; i < multiRequestOption.option.length; i++) {
                if (multiRequestOption.option[i] && multiRequestOption.option[i].result) {
                    if (multiRequestOption.option[i].result.error) {
                        multiRequestOption.option[i].result.error(error);
                    }
                    if (multiRequestOption.option[i].result.complete) {
                        multiRequestOption.option[i].result.complete();
                    }
                }
            }
            return Promise.resolve(task);
        });
    };
    ZHttp.request = function (zOption, resolve, reject) {
        z_log_util_1.ZLogUtil.log("请求地址:" + zOption.url);
        z_log_util_1.ZLogUtil.log(zOption.body ? "请求数据:" + JSON.stringify(zOption.body) : "");
        zOption.type = zOption.type || 'POST';
        zOption.header = ZHttp.processHeader(zOption.header);
        zOption.zreply = zOption.zreply || new z_http_reply_default_1.ZHttpReplyDefault();
        if (!zOption.isHideLoading) {
            wx.showLoading({
                title: zOption.loadingMsg || '',
            });
        }
        return wx.request({
            url: zOption.url || '',
            data: zOption.body,
            header: zOption.header,
            method: zOption.type,
            success: function (res) {
                ZHttp.processResponse(zOption, res, resolve, reject);
            },
            fail: function (error) {
                ZHttp.processCatch(zOption, error, reject);
            },
            complete: function () {
                if (!zOption.isHideLoading) {
                    wx.hideLoading({});
                }
                if (zOption.result && zOption.result.complete) {
                    zOption.result.complete();
                }
            }
        });
    };
    ZHttp.processResponse = function (zOption, res, resolve, reject) {
        z_log_util_1.ZLogUtil.log("返回地址:" + zOption.url);
        z_log_util_1.ZLogUtil.log("返回数据:" + JSON.stringify(res));
        var jsonObj = res;
        if (zOption.zreply) {
            if (zOption.result && zOption.result.success && zOption.zreply.isSuccess(jsonObj[zOption.zreply.codeKey])) {
                if (jsonObj[zOption.zreply.dataKey]) {
                    zOption.result.success(jsonObj[zOption.zreply.dataKey]);
                    if (resolve) {
                        resolve(jsonObj[zOption.zreply.dataKey]);
                    }
                }
                else {
                    zOption.result.success(jsonObj);
                    if (resolve) {
                        resolve(jsonObj[zOption.zreply.dataKey]);
                    }
                }
                return;
            }
            if (!zOption.zreply.isSuccess(jsonObj[zOption.zreply.codeKey]) && (jsonObj[zOption.zreply.codeKey] || jsonObj[zOption.zreply.msgKey])) {
                ZHttp.processCatch(zOption, new z_http_error_1.ZHttpError(jsonObj.code, jsonObj.msg), reject);
            }
            else {
                ZHttp.processCatch(zOption, new z_http_error_1.ZHttpError(1001, "数据不符合规范：\n" + JSON.stringify(res)), reject);
            }
        }
    };
    ZHttp.processCatch = function (zOption, error, reject) {
        var errorObj;
        if (error instanceof z_http_error_1.ZHttpError || (z_util_1.ZUtil.isValid(error.code) && z_util_1.ZUtil.isValid(error.errMsg))) {
            errorObj = ZHttp.getErrorReply(error.errMsg, error.code);
        }
        else {
            errorObj = ZHttp.getErrorReply(error.errMsg, -1);
        }
        if (!zOption.isHideToastError) {
            var msg = z_util_1.ZUtil.isValid(errorObj.code) ? errorObj.msg + "(" + errorObj.code + ")" : errorObj.msg;
            wx.showToast({
                title: msg || '',
            });
        }
        if (zOption.result && zOption.result.error) {
            zOption.result.error(errorObj);
            if (reject) {
                reject(errorObj);
            }
        }
    };
    ZHttp.getErrorReply = function (message, code) {
        var errorObj = new z_http_error_reply_1.ZHttpErrorReply();
        errorObj.code = code;
        errorObj.msg = (message == null) ? "null" : message;
        return errorObj;
    };
    ZHttp.processHeader = function (header) {
        if (!header) {
            header = {};
        }
        header['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';
        return header;
    };
    return ZHttp;
}());
exports.ZHttp = ZHttp;
//# sourceMappingURL=data:application/json;base64,