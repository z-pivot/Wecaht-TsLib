"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var DateUtil = (function () {
    function DateUtil() {
    }
    DateUtil.getTimeSecondStamp = function (date) {
        var d = this.getDate(date);
        return d ? d.getTime() / 1000 : 0;
    };
    DateUtil.getCurTimeSecondStamp = function () {
        return new Date().getTime() / 1000;
    };
    DateUtil.getLatestSecondStampInDay = function (date) {
        return this.getLatestTimeInDay(date) ? this.getLatestTimeInDay(date).getTime() / 1000 : 0;
    };
    DateUtil.getEarliestSecondStampInDay = function (date) {
        return this.getEarliestTimeInDay(date) ? this.getEarliestTimeInDay(date).getTime() / 1000 : 0;
    };
    DateUtil.getEarliestSecondStampInMonth = function (date) {
        return this.getEarliestTimeInMonth(date) ? this.getEarliestTimeInMonth(date).getTime() / 1000 : 0;
    };
    DateUtil.getLatestSecondStampInMonth = function (date) {
        return this.getLatestTimeInMonth(date) ? this.getLatestTimeInMonth(date).getTime() / 1000 : 0;
    };
    DateUtil.getEarliestSecondStampInQuarter = function (date) {
        return this.getEarliestTimeInQuarter(date) ? this.getEarliestTimeInQuarter(date).getTime() / 1000 : 0;
    };
    DateUtil.getLatestSecondStampInQuarter = function (date) {
        return this.getLatestTimeInQuarter(date) ? this.getLatestTimeInQuarter(date).getTime() / 1000 : 0;
    };
    DateUtil.getCurrentYear = function () {
        return new Date().getFullYear();
    };
    DateUtil.getCurrentMonth = function () {
        return new Date().getMonth();
    };
    DateUtil.getCurrentDay = function () {
        return new Date().getDay();
    };
    DateUtil.getLatestTimeInDay = function (date) {
        var d = this.getDate(date);
        if (d) {
            d.setHours(23, 59, 59, 0);
        }
        return d;
    };
    DateUtil.getEarliestTimeInDay = function (date) {
        var d = this.getDate(date);
        if (d) {
            d.setHours(0, 0, 0, 0);
        }
        return d;
    };
    DateUtil.getEarliestTimeInMonth = function (date) {
        var d = this.getDate(date);
        if (d) {
            d.setDate(1);
            d.setHours(0, 0, 0, 0);
        }
        return d;
    };
    DateUtil.getLatestTimeInMonth = function (date) {
        var d = this.getDate(date);
        if (d) {
            d.setDate(this.getDaysInMonth(d.getFullYear(), d.getMonth()));
            d.setHours(23, 59, 59, 0);
        }
        return d;
    };
    DateUtil.getEarliestTimeInQuarter = function (date) {
        var d = this.getDate(date);
        if (d) {
            d.setMonth(this.getEarliestMonthInQuarter(date));
            d.setDate(1);
            d.setHours(0, 0, 0, 0);
        }
        return d;
    };
    DateUtil.getLatestTimeInQuarter = function (date) {
        var d = this.getDate(date);
        if (d) {
            d.setMonth(this.getLatestMonthInQuarter(date));
            d.setDate(this.getDaysInMonth(d.getFullYear(), d.getMonth()));
            d.setHours(23, 59, 59, 0);
        }
        return d;
    };
    DateUtil.getDateStr = function (date, sFormat) {
        date = date ? date : new Date();
        sFormat = sFormat ? sFormat : 'yyyy-MM-dd';
        var time = {
            Year: 0,
            TYear: '0',
            Month: 0,
            TMonth: '0',
            Day: 0,
            TDay: '0',
            Hour: 0,
            THour: '0',
            hour: 0,
            Thour: '0',
            Minute: 0,
            TMinute: '0',
            Second: 0,
            TSecond: '0',
            Millisecond: 0
        };
        time.Year = date.getFullYear();
        time.TYear = String(time.Year).substr(2);
        time.Month = date.getMonth() + 1;
        time.TMonth = time.Month < 10 ? '0' + time.Month : String(time.Month);
        time.Day = date.getDate();
        time.TDay = time.Day < 10 ? '0' + time.Day : String(time.Day);
        time.Hour = date.getHours();
        time.THour = time.Hour < 10 ? '0' + time.Hour : String(time.Hour);
        time.hour = time.Hour < 13 ? time.Hour : time.Hour - 12;
        time.Thour = time.hour < 10 ? '0' + time.hour : String(time.hour);
        time.Minute = date.getMinutes();
        time.TMinute = time.Minute < 10 ? '0' + time.Minute : String(time.Minute);
        time.Second = date.getSeconds();
        time.TSecond = time.Second < 10 ? '0' + time.Second : String(time.Second);
        time.Millisecond = date.getMilliseconds();
        return sFormat.replace(/yyyy/ig, String(time.Year))
            .replace(/yyy/ig, String(time.Year))
            .replace(/yy/ig, time.TYear)
            .replace(/y/ig, time.TYear)
            .replace(/MM/g, time.TMonth)
            .replace(/M/g, String(time.Month))
            .replace(/dd/ig, time.TDay)
            .replace(/d/ig, String(time.Day))
            .replace(/HH/g, time.THour)
            .replace(/H/g, String(time.Hour))
            .replace(/hh/g, time.Thour)
            .replace(/h/g, String(time.hour))
            .replace(/mm/g, time.TMinute)
            .replace(/m/g, String(time.Minute))
            .replace(/ss/ig, time.TSecond)
            .replace(/s/ig, String(time.Second))
            .replace(/fff/ig, String(time.Millisecond));
    };
    DateUtil.getTimeAgo = function (oldTime) {
        var minute = 1000 * 60;
        var hour = minute * 60;
        var day = hour * 24;
        var month = day * 30;
        var year = day * 365;
        var now = new Date().getTime();
        var old = oldTime.getTime();
        var diffValue = now - old;
        var yearC = diffValue / year;
        var monthC = diffValue / month;
        var weekC = diffValue / (7 * day);
        var dayC = diffValue / day;
        var hourC = diffValue / hour;
        var minC = diffValue / minute;
        if (yearC >= 1) {
            return Math.floor(monthC) + '年前';
        }
        else if (monthC >= 1) {
            return Math.floor(monthC) + '个月前';
        }
        else if (weekC >= 1) {
            return Math.floor(weekC) + '周前';
        }
        else if (dayC >= 1) {
            return Math.floor(dayC) + '天前';
        }
        else if (hourC >= 1) {
            return Math.floor(hourC) + '小时前';
        }
        else if (minC >= 1) {
            return Math.floor(minC) + '分钟前';
        }
        else {
            return '刚刚';
        }
    };
    DateUtil.getServealTimeAgo = function (oldTime) {
        var minute = 1000 * 60;
        var hour = minute * 60;
        var day = hour * 24;
        var month = day * 30;
        var year = day * 365;
        var now = new Date().getTime();
        var old = oldTime.getTime();
        var diffValue = now - old;
        var yearC = diffValue / year;
        var monthC = diffValue / month;
        var weekC = diffValue / (7 * day);
        var dayC = diffValue / day;
        var hourC = diffValue / hour;
        var minC = diffValue / minute;
        if (dayC >= 2) {
            return this.getDateStr(oldTime, 'yyyy-MM-dd HH:mm:ss');
        }
        else if (dayC >= 1) {
            return '昨天' + this.getDateStr(oldTime, 'HH:mm');
        }
        else if (hourC >= 1) {
            return Math.floor(hourC) + '小时前';
        }
        else if (minC >= 1) {
            return Math.floor(minC) + '分钟前';
        }
        else {
            return '刚刚';
        }
    };
    DateUtil.getEarliestMonthInQuarter = function (date) {
        return this.getQuarter(date) * 3;
    };
    DateUtil.getLatestMonthInQuarter = function (date) {
        return this.getQuarter(date) * 3 + 2;
    };
    DateUtil.getQuarter = function (date) {
        var d = this.getDate(date);
        if (d) {
            var month = d.getMonth();
            return Math.floor(month / 3);
        }
        return 0;
    };
    DateUtil.getDaysInMonth = function (year, month) {
        month++;
        var temp = new Date(year, month, 0);
        return temp.getDate();
    };
    DateUtil.getDate = function (date) {
        var d;
        if (typeof date === 'string') {
            d = new Date(date);
        }
        else if (typeof date === 'number') {
            d = new Date(date);
        }
        else {
            d = date;
        }
        return d;
    };
    DateUtil.getEarlyQuartsInfo = function (earlyYear) {
        var dateItems = [];
        var currentYear = DateUtil.getCurrentYear();
        for (var i = currentYear; i >= earlyYear; i--) {
            var k = 4;
            if (i === currentYear) {
                k = DateUtil.getQuarter(new Date()) + 1;
            }
            for (var j = k; j >= 1; j--) {
                var dateStr = i + "/" + j * 3 + "/01";
                dateItems.push({
                    des: i + '年第' + j + '季度',
                    minDate: DateUtil.getEarliestSecondStampInQuarter(dateStr),
                    maxDate: DateUtil.getLatestSecondStampInQuarter(dateStr)
                });
            }
        }
        return dateItems;
    };
    return DateUtil;
}());
exports.DateUtil = DateUtil;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS51dGlsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGF0ZS51dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBR0E7SUFBQTtJQTRZQSxDQUFDO0lBcllVLDJCQUFrQixHQUF6QixVQUEwQixJQUE0QjtRQUNsRCxJQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdCLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQU1NLDhCQUFxQixHQUE1QjtRQUNJLE9BQU8sSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUM7SUFDdkMsQ0FBQztJQU9NLGtDQUF5QixHQUFoQyxVQUFpQyxJQUE0QjtRQUN6RCxPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlGLENBQUM7SUFPTSxvQ0FBMkIsR0FBbEMsVUFBbUMsSUFBNEI7UUFDM0QsT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNsRyxDQUFDO0lBT00sc0NBQTZCLEdBQXBDLFVBQXFDLElBQTRCO1FBQzdELE9BQU8sSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFLEdBQUcsSUFBSSxD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NUIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7UUFDeEQsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEUsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDaEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDMUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDaEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDMUUsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7UUFFMUMsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFD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R0FBTSxDQUFDLFNBQUksQ0FBQyxHQUFHLENBQUMsUUFBSyxDQUFDO2dCQUNuQyxTQUFTLENBQUMsSUFBSSxDQUFDO29CQUNYLEdBQUcsRUFBRSxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxJQUFJO29CQUN4QixPQUFPLEVBQUUsUUFBUSxDQUFDLCtCQUErQixDQUFDLE9BQU8sQ0FBQztvQkFDMUQsT0FBTyxFQUFFLFFBQVEsQ0FBQyw2QkFBNkIsQ0FBQyxPQUFPLENBQUM7aUJBQzNELENBQUMsQ0FBQzthQUNOO1NBQ0o7UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNyQixDQUFDO0lBQ0wsZUFBQztBQUFELENBQUMsQUE1WUQsSUE0WUM7QUE1WVksNEJBQVEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICog5pel5pyf55u45YWz5bel5YW357G7XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRGF0ZVV0aWwge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W56eS5pe26Ze05oizXHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxyXG4gICAgICogQHBhcmFtIGRhdGVcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGdldFRpbWVTZWNvbmRTdGFtcChkYXRlOiBzdHJpbmcgfCBudW1iZXIgfCBEYXRlKTogbnVtYmVyIHtcclxuICAgICAgICBjb25zdCBkID0gdGhpcy5nZXREYXRlKGRhdGUpO1xyXG4gICAgICAgIHJldHVybiBkID8gZC5nZXRUaW1lKCkgLyAxMDAwIDogMDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPluW9k+WJjeenkuaXtumXtOaIs1xyXG4gICAgICogQHJldHVybnMge251bWJlcn1cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGdldEN1clRpbWVTZWNvbmRTdGFtcCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKSAvIDEwMDA7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5bkuIDlpKnkuK3mnIDmmZrnmoTml7bpl7TmiLNcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgbnVtYmVyIHwgRGF0ZX0gZGF0ZVxyXG4gICAgICogQHJldHVybnMge0RhdGV9XHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBnZXRMYXRlc3RTZWNvbmRTdGFtcEluRGF5KGRhdGU6IHN0cmluZyB8IG51bWJlciB8IERhdGUpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldExhdGVzdFRpbWVJbkRheShkYXRlKSA/IHRoaXMuZ2V0TGF0ZXN0VGltZUluRGF5KGRhdGUpLmdldFRpbWUoKSAvIDEwMDAgOiAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5LiA5aSp5Lit5pyA5pep55qE5pe26Ze05oizXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bWJlciB8IERhdGV9IGRhdGVcclxuICAgICAqIEByZXR1cm5zIHtEYXRlfVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZ2V0RWFybGllc3RTZWNvbmRTdGFtcEluRGF5KGRhdGU6IHN0cmluZyB8IG51bWJlciB8IERhdGUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRFYXJsaWVzdFRpbWVJbkRheShkYXRlKSA/IHRoaXMuZ2V0RWFybGllc3RUaW1lSW5EYXkoZGF0ZSkuZ2V0VGltZSgpIC8gMTAwMCA6IDA7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5bkuIDmnIjkuK3mnIDml6nnmoTml7bpl7TmiLNcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgbnVtYmVyIHwgRGF0ZX0gZGF0ZVxyXG4gICAgICogQHJldHVybnMge0RhdGV9XHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBnZXRFYXJsaWVzdFNlY29uZFN0YW1wSW5Nb250aChkYXRlOiBzdHJpbmcgfCBudW1iZXIgfCBEYXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RWFybGllc3RUaW1lSW5Nb250aChkYXRlKSA/IHRoaXMuZ2V0RWFybGllc3RUaW1lSW5Nb250aChkYXRlKS5nZXRUaW1lKCkgLyAxMDAwIDogMDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPluS4gOaciOS4reacgOaZmueahOaXtumXtOaIs1xyXG4gICAgICogQHBhcmFtIHtzdHJpbmcgfCBudW1iZXIgfCBEYXRlfSBkYXRlXHJcbiAgICAgKiBAcmV0dXJucyB7RGF0ZX1cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGdldExhdGVzdFNlY29uZFN0YW1wSW5Nb250aChkYXRlOiBzdHJpbmcgfCBudW1iZXIgfCBEYXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TGF0ZXN0VGltZUluTW9udGgoZGF0ZSkgPyB0aGlzLmdldExhdGVzdFRpbWVJbk1vbnRoKGRhdGUpLmdldFRpbWUoKSAvIDEwMDAgOiAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5LiA5a2j5bqm5Lit5pyA5pep55qE5pe26Ze05oizXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bWJlciB8IERhdGV9IGRhdGVcclxuICAgICAqIEByZXR1cm5zIHtEYXRlfVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZ2V0RWFybGllc3RTZWNvbmRTdGFtcEluUXVhcnRlcihkYXRlOiBzdHJpbmcgfCBudW1iZXIgfCBEYXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RWFybGllc3RUaW1lSW5RdWFydGVyKGRhdGUpID8gdGhpcy5nZXRFYXJsaWVzdFRpbWVJblF1YXJ0ZXIoZGF0ZSkuZ2V0VGltZSgpIC8gMTAwMCA6IDA7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5bkuIDlraPluqbkuK3mnIDmmZrnmoTml7bpl7TmiLNcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgbnVtYmVyIHwgRGF0ZX0gZGF0ZVxyXG4gICAgICogQHJldHVybnMge0RhdGV9XHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBnZXRMYXRlc3RTZWNvbmRTdGFtcEluUXVhcnRlcihkYXRlOiBzdHJpbmcgfCBudW1iZXIgfCBEYXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TGF0ZXN0VGltZUluUXVhcnRlcihkYXRlKSA/IHRoaXMuZ2V0TGF0ZXN0VGltZUluUXVhcnRlcihkYXRlKS5nZXRUaW1lKCkgLyAxMDAwIDogMDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPluW9k+WJjeW5tFxyXG4gICAgICogQHJldHVybnMge251bWJlcn1cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGdldEN1cnJlbnRZZWFyKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPluW9k+WJjeaciFxyXG4gICAgICogQHJldHVybnMge251bWJlcn1cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGdldEN1cnJlbnRNb250aCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSgpLmdldE1vbnRoKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5blvZPliY3lpKlcclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBnZXRDdXJyZW50RGF5KCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0RGF5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5bkuIDlpKnnmoTmnIDmmZrml7bpl7RcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgbnVtYmVyIHwgRGF0ZX0gZGF0ZVxyXG4gICAgICogQHJldHVybnMge0RhdGV9XHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBnZXRMYXRlc3RUaW1lSW5EYXkoZGF0ZTogc3RyaW5nIHwgbnVtYmVyIHwgRGF0ZSk6IERhdGUge1xyXG4gICAgICAgIGNvbnN0IGQgPSB0aGlzLmdldERhdGUoZGF0ZSk7XHJcbiAgICAgICAgaWYgKGQpIHtcclxuICAgICAgICAgICAgZC5zZXRIb3VycygyMywgNTksIDU5LCAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5bkuIDlpKnnmoTmnIDml6nml7bpl7RcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgbnVtYmVyIHwgRGF0ZX0gZGF0ZVxyXG4gICAgICogQHJldHVybnMge0RhdGV9XHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBnZXRFYXJsaWVzdFRpbWVJbkRheShkYXRlOiBzdHJpbmcgfCBudW1iZXIgfCBEYXRlKTogRGF0ZSB7XHJcbiAgICAgICAgY29uc3QgZCA9IHRoaXMuZ2V0RGF0ZShkYXRlKTtcclxuICAgICAgICBpZiAoZCkge1xyXG4gICAgICAgICAgICBkLnNldEhvdXJzKDAsIDAsIDAsIDApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPluS4gOaciOeahOacgOaXqeaXtumXtFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmcgfCBudW1iZXIgfCBEYXRlfSBkYXRlXHJcbiAgICAgKiBAcmV0dXJucyB7RGF0ZX1cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGdldEVhcmxpZXN0VGltZUluTW9udGgoZGF0ZTogc3RyaW5nIHwgbnVtYmVyIHwgRGF0ZSk6IERhdGUge1xyXG4gICAgICAgIGNvbnN0IGQgPSB0aGlzLmdldERhdGUoZGF0ZSk7XHJcbiAgICAgICAgaWYgKGQpIHtcclxuICAgICAgICAgICAgZC5zZXREYXRlKDEpO1xyXG4gICAgICAgICAgICBkLnNldEhvdXJzKDAsIDAsIDAsIDApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPluS4gOaciOeahOacgOaZmuaXtumXtFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmcgfCBudW1iZXIgfCBEYXRlfSBkYXRlXHJcbiAgICAgKiBAcmV0dXJucyB7RGF0ZX1cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGdldExhdGVzdFRpbWVJbk1vbnRoKGRhdGU6IHN0cmluZyB8IG51bWJlciB8IERhdGUpOiBEYXRlIHtcclxuICAgICAgICBjb25zdCBkID0gdGhpcy5nZXREYXRlKGRhdGUpO1xyXG4gICAgICAgIGlmIChkKSB7XHJcbiAgICAgICAgICAgIGQuc2V0RGF0ZSh0aGlzLmdldERheXNJbk1vbnRoKGQuZ2V0RnVsbFllYXIoKSwgZC5nZXRNb250aCgpKSk7XHJcbiAgICAgICAgICAgIGQuc2V0SG91cnMoMjMsIDU5LCA1OSwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBkO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5a2j5bqm55qE5pyA5pep5pe26Ze0XHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bWJlciB8IERhdGV9IGRhdGVcclxuICAgICAqIEByZXR1cm5zIHtEYXRlfVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZ2V0RWFybGllc3RUaW1lSW5RdWFydGVyKGRhdGU6IHN0cmluZyB8IG51bWJlciB8IERhdGUpOiBEYXRlIHtcclxuICAgICAgICBjb25zdCBkID0gdGhpcy5nZXREYXRlKGRhdGUpO1xyXG4gICAgICAgIGlmIChkKSB7XHJcbiAgICAgICAgICAgIGQuc2V0TW9udGgodGhpcy5nZXRFYXJsaWVzdE1vbnRoSW5RdWFydGVyKGRhdGUpKTtcclxuICAgICAgICAgICAgZC5zZXREYXRlKDEpO1xyXG4gICAgICAgICAgICBkLnNldEhvdXJzKDAsIDAsIDAsIDApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPluWto+W6pueahOacgOaZmuaXtumXtFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmcgfCBudW1iZXIgfCBEYXRlfSBkYXRlXHJcbiAgICAgKiBAcmV0dXJucyB7RGF0ZX1cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGdldExhdGVzdFRpbWVJblF1YXJ0ZXIoZGF0ZTogc3RyaW5nIHwgbnVtYmVyIHwgRGF0ZSk6IERhdGUge1xyXG4gICAgICAgIGNvbnN0IGQgPSB0aGlzLmdldERhdGUoZGF0ZSk7XHJcbiAgICAgICAgaWYgKGQpIHtcclxuICAgICAgICAgICAgZC5zZXRNb250aCh0aGlzLmdldExhdGVzdE1vbnRoSW5RdWFydGVyKGRhdGUpKTtcclxuICAgICAgICAgICAgZC5zZXREYXRlKHRoaXMuZ2V0RGF5c0luTW9udGgoZC5nZXRGdWxsWWVhcigpLCBkLmdldE1vbnRoKCkpKTtcclxuICAgICAgICAgICAgZC5zZXRIb3VycygyMywgNTksIDU5LCAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDml6XmnJ/lr7nosaHovazkuLrml6XmnJ/lrZfnrKbkuLJcclxuICAgICAqIEBwYXJhbSBkYXRlIOmcgOimgeagvOW8j+WMlueahOaXpeacn+WvueixoVxyXG4gICAgICogQHBhcmFtIHNGb3JtYXQg6L6T5Ye65qC85byPLOm7mOiupOS4unl5eXktTU0tZGQgICAgICAgICAgICAgICAgICAgICAgICDlubTvvJp577yM5pyI77yaTe+8jOaXpe+8mmTvvIzml7bvvJpo77yM5YiG77yabe+8jOenku+8mnNcclxuICAgICAqIEBleGFtcGxlICBkYXRlRm9ybWF0KG5ldyBEYXRlKCkpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiMjAxNy0wMi0yOFwiXHJcbiAgICAgKiBAZXhhbXBsZSAgZGF0ZUZvcm1hdChuZXcgRGF0ZSgpLCd5eXl5LU1NLWRkJykgICAgICAgICAgICAgICAgICBcIjIwMTctMDItMjhcIlxyXG4gICAgICogQGV4YW1wbGUgIGRhdGVGb3JtYXQobmV3IERhdGUoKSwneXl5eS1NTS1kZCBISDptbTpzcycpICAgICAgICAgXCIyMDE3LTAyLTI4IDEzOjI0OjAwXCIgICBwczpISDoyNOWwj+aXtuWItlxyXG4gICAgICogQGV4YW1wbGUgIGRhdGVGb3JtYXQobmV3IERhdGUoKSwneXl5eS1NTS1kZCBoaDptbTpzcycpICAgICAgICAgXCIyMDE3LTAyLTI4IDAxOjI0OjAwXCIgICBwczpoaDoxMuWwj+aXtuWItlxyXG4gICAgICogQGV4YW1wbGUgIGRhdGVGb3JtYXQobmV3IERhdGUoKSwnaGg6bW0nKSAgICAgICAgICAgICAgICAgICAgICAgXCIwOToyNFwiXHJcbiAgICAgKiBAZXhhbXBsZSAgZGF0ZUZvcm1hdChuZXcgRGF0ZSgpLCd5eXl5LU1NLWRkVEhIOm1tOnNzKzA4OjAwJykgICBcIjIwMTctMDItMjhUMTM6MjQ6MDArMDg6MDBcIlxyXG4gICAgICogQGV4YW1wbGUgIGRhdGVGb3JtYXQobmV3IERhdGUoJzIwMTctMDItMjggMTM6MjQ6MDAnKSwneXl5eS1NTS1kZFRISDptbTpzcyswODowMCcpICAgXCIyMDE3LTAyLTI4VDEzOjI0OjAwKzA4OjAwXCJcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBnZXREYXRlU3RyKGRhdGU/OiBEYXRlLCBzRm9ybWF0PzogU3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICBkYXRlID0gZGF0ZSA/IGRhdGUgOiBuZXcgRGF0ZSgpO1xyXG4gICAgICAgIHNGb3JtYXQgPSBzRm9ybWF0ID8gc0Zvcm1hdCA6ICd5eXl5LU1NLWRkJztcclxuICAgICAgICBjb25zdCB0aW1lID0ge1xyXG4gICAgICAgICAgICBZZWFyOiAwLFxyXG4gICAgICAgICAgICBUWWVhcjogJzAnLFxyXG4gICAgICAgICAgICBNb250aDogMCxcclxuICAgICAgICAgICAgVE1vbnRoOiAnMCcsXHJcbiAgICAgICAgICAgIERheTogMCxcclxuICAgICAgICAgICAgVERheTogJzAnLFxyXG4gICAgICAgICAgICBIb3VyOiAwLFxyXG4gICAgICAgICAgICBUSG91cjogJzAnLFxyXG4gICAgICAgICAgICBob3VyOiAwLFxyXG4gICAgICAgICAgICBUaG91cjogJzAnLFxyXG4gICAgICAgICAgICBNaW51dGU6IDAsXHJcbiAgICAgICAgICAgIFRNaW51dGU6ICcwJyxcclxuICAgICAgICAgICAgU2Vjb25kOiAwLFxyXG4gICAgICAgICAgICBUU2Vjb25kOiAnMCcsXHJcbiAgICAgICAgICAgIE1pbGxpc2Vjb25kOiAwXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aW1lLlllYXIgPSBkYXRlLmdldEZ1bGxZZWFyKCk7XHJcbiAgICAgICAgdGltZS5UWWVhciA9IFN0cmluZyh0aW1lLlllYXIpLnN1YnN0cigyKTtcclxuICAgICAgICB0aW1lLk1vbnRoID0gZGF0ZS5nZXRNb250aCgpICsgMTtcclxuICAgICAgICB0aW1lLlRNb250aCA9IHRpbWUuTW9udGggPCAxMCA/ICcwJyArIHRpbWUuTW9udGggOiBTdHJpbmcodGltZS5Nb250aCk7XHJcbiAgICAgICAgdGltZS5EYXkgPSBkYXRlLmdldERhdGUoKTtcclxuICAgICAgICB0aW1lLlREYXkgPSB0aW1lLkRheSA8IDEwID8gJzAnICsgdGltZS5EYXkgOiBTdHJpbmcodGltZS5EYXkpO1xyXG4gICAgICAgIHRpbWUuSG91ciA9IGRhdGUuZ2V0SG91cnMoKTtcclxuICAgICAgICB0aW1lLlRIb3VyID0gdGltZS5Ib3VyIDwgMTAgPyAnMCcgKyB0aW1lLkhvdXIgOiBTdHJpbmcodGltZS5Ib3VyKTtcclxuICAgICAgICB0aW1lLmhvdXIgPSB0aW1lLkhvdXIgPCAxMyA/IHRpbWUuSG91ciA6IHRpbWUuSG91ciAtIDEyO1xyXG4gICAgICAgIHRpbWUuVGhvdXIgPSB0aW1lLmhvdXIgPCAxMCA/ICcwJyArIHRpbWUuaG91ciA6IFN0cmluZyh0aW1lLmhvdXIpO1xyXG4gICAgICAgIHRpbWUuTWludXRlID0gZGF0ZS5nZXRNaW51dGVzKCk7XHJcbiAgICAgICAgdGltZS5UTWludXRlID0gdGltZS5NaW51dGUgPCAxMCA/ICcwJyArIHRpbWUuTWludXRlIDogU3RyaW5nKHRpbWUuTWludXRlKTtcclxuICAgICAgICB0aW1lLlNlY29uZCA9IGRhdGUuZ2V0U2Vjb25kcygpO1xyXG4gICAgICAgIHRpbWUuVFNlY29uZCA9IHRpbWUuU2Vjb25kIDwgMTAgPyAnMCcgKyB0aW1lLlNlY29uZCA6IFN0cmluZyh0aW1lLlNlY29uZCk7XHJcbiAgICAgICAgdGltZS5NaWxsaXNlY29uZCA9IGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCk7XHJcblxyXG4gICAgICAgIHJldHVybiBzRm9ybWF0LnJlcGxhY2UoL3l5eXkvaWcsIFN0cmluZyh0aW1lLlllYXIpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL3l5eS9pZywgU3RyaW5nKHRpbWUuWWVhcikpXHJcbiAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgveXkvaWcsIHRpbWUuVFllYXIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgveS9pZywgdGltZS5UWWVhcilcclxuICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9NTS9nLCB0aW1lLlRNb250aClcclxuICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9NL2csIFN0cmluZyh0aW1lLk1vbnRoKSlcclxuICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9kZC9pZywgdGltZS5URGF5KVxyXG4gICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL2QvaWcsIFN0cmluZyh0aW1lLkRheSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvSEgvZywgdGltZS5USG91cilcclxuICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9IL2csIFN0cmluZyh0aW1lLkhvdXIpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL2hoL2csIHRpbWUuVGhvdXIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvaC9nLCBTdHJpbmcodGltZS5ob3VyKSlcclxuICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9tbS9nLCB0aW1lLlRNaW51dGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvbS9nLCBTdHJpbmcodGltZS5NaW51dGUpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL3NzL2lnLCB0aW1lLlRTZWNvbmQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvcy9pZywgU3RyaW5nKHRpbWUuU2Vjb25kKSlcclxuICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9mZmYvaWcsIFN0cmluZyh0aW1lLk1pbGxpc2Vjb25kKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5bml7bpl7TnlKguLuS7peWJjeeahOW9ouW8j1xyXG4gICAgICogQHBhcmFtIG9sZFRpbWVcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGdldFRpbWVBZ28ob2xkVGltZTogRGF0ZSk6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgbWludXRlOiBudW1iZXIgPSAxMDAwICogNjA7XHJcbiAgICAgICAgY29uc3QgaG91cjogbnVtYmVyID0gbWludXRlICogNjA7XHJcbiAgICAgICAgY29uc3QgZGF5OiBudW1iZXIgPSBob3VyICogMjQ7XHJcbiAgICAgICAgY29uc3QgbW9udGg6IG51bWJlciA9IGRheSAqIDMwO1xyXG4gICAgICAgIGNvbnN0IHllYXI6IG51bWJlciA9IGRheSAqIDM2NTtcclxuICAgICAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgICAgICBjb25zdCBvbGQgPSBvbGRUaW1lLmdldFRpbWUoKTtcclxuICAgICAgICBjb25zdCBkaWZmVmFsdWUgPSBub3cgLSBvbGQ7XHJcbiAgICAgICAgY29uc3QgeWVhckMgPSBkaWZmVmFsdWUgLyB5ZWFyO1xyXG4gICAgICAgIGNvbnN0IG1vbnRoQyA9IGRpZmZWYWx1ZSAvIG1vbnRoO1xyXG4gICAgICAgIGNvbnN0IHdlZWtDID0gZGlmZlZhbHVlIC8gKDcgKiBkYXkpO1xyXG4gICAgICAgIGNvbnN0IGRheUMgPSBkaWZmVmFsdWUgLyBkYXk7XHJcbiAgICAgICAgY29uc3QgaG91ckMgPSBkaWZmVmFsdWUgLyBob3VyO1xyXG4gICAgICAgIGNvbnN0IG1pbkMgPSBkaWZmVmFsdWUgLyBtaW51dGU7XHJcbiAgICAgICAgaWYgKHllYXJDID49IDEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IobW9udGhDKSArICflubTliY0nO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobW9udGhDID49IDEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IobW9udGhDKSArICfkuKrmnIjliY0nO1xyXG4gICAgICAgIH0gZWxzZSBpZiAod2Vla0MgPj0gMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcih3ZWVrQykgKyAn5ZGo5YmNJztcclxuICAgICAgICB9IGVsc2UgaWYgKGRheUMgPj0gMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihkYXlDKSArICflpKnliY0nO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaG91ckMgPj0gMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihob3VyQykgKyAn5bCP5pe25YmNJztcclxuICAgICAgICB9IGVsc2UgaWYgKG1pbkMgPj0gMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihtaW5DKSArICfliIbpkp/liY0nO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAn5Yia5YiaJztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5bml7bpl7Tku6Xlh6DliIbpkp/liY3vvIzlh6DlsI/ml7bliY3vvIzmmKjlpKnvvIzlpKfkuo7kuKTlpKnmmL7npLrml6XmnJ9cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGdldFNlcnZlYWxUaW1lQWdvKG9sZFRpbWU6IERhdGUpOiBzdHJpbmcge1xyXG4gICAgICAgIGNvbnN0IG1pbnV0ZTogbnVtYmVyID0gMTAwMCAqIDYwO1xyXG4gICAgICAgIGNvbnN0IGhvdXI6IG51bWJlciA9IG1pbnV0ZSAqIDYwO1xyXG4gICAgICAgIGNvbnN0IGRheTogbnVtYmVyID0gaG91ciAqIDI0O1xyXG4gICAgICAgIGNvbnN0IG1vbnRoOiBudW1iZXIgPSBkYXkgKiAzMDtcclxuICAgICAgICBjb25zdCB5ZWFyOiBudW1iZXIgPSBkYXkgKiAzNjU7XHJcbiAgICAgICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbiAgICAgICAgY29uc3Qgb2xkID0gb2xkVGltZS5nZXRUaW1lKCk7XHJcbiAgICAgICAgY29uc3QgZGlmZlZhbHVlID0gbm93IC0gb2xkO1xyXG4gICAgICAgIGNvbnN0IHllYXJDID0gZGlmZlZhbHVlIC8geWVhcjtcclxuICAgICAgICBjb25zdCBtb250aEMgPSBkaWZmVmFsdWUgLyBtb250aDtcclxuICAgICAgICBjb25zdCB3ZWVrQyA9IGRpZmZWYWx1ZSAvICg3ICogZGF5KTtcclxuICAgICAgICBjb25zdCBkYXlDID0gZGlmZlZhbHVlIC8gZGF5O1xyXG4gICAgICAgIGNvbnN0IGhvdXJDID0gZGlmZlZhbHVlIC8gaG91cjtcclxuICAgICAgICBjb25zdCBtaW5DID0gZGlmZlZhbHVlIC8gbWludXRlO1xyXG4gICAgICAgIGlmIChkYXlDID49IDIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RGF0ZVN0cihvbGRUaW1lLCAneXl5eS1NTS1kZCBISDptbTpzcycpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZGF5QyA+PSAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAn5pio5aSpJyArIHRoaXMuZ2V0RGF0ZVN0cihvbGRUaW1lLCAnSEg6bW0nKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGhvdXJDID49IDEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoaG91ckMpICsgJ+Wwj+aXtuWJjSc7XHJcbiAgICAgICAgfSBlbHNlIGlmIChtaW5DID49IDEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IobWluQykgKyAn5YiG6ZKf5YmNJztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gJ+WImuWImic7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635b6X5a2j5bqm55qE5byA56uv5pyI5Lu9XHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBnZXRFYXJsaWVzdE1vbnRoSW5RdWFydGVyKGRhdGU6IHN0cmluZyB8IG51bWJlciB8IERhdGUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRRdWFydGVyKGRhdGUpICogMztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+W+l+Wto+W6pueahOe7k+adn+aciOS7vVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZ2V0TGF0ZXN0TW9udGhJblF1YXJ0ZXIoZGF0ZTogc3RyaW5nIHwgbnVtYmVyIHwgRGF0ZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldFF1YXJ0ZXIoZGF0ZSkgKiAzICsgMjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+W+l+aXpeacn+eahOWto+W6plxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZ2V0UXVhcnRlcihkYXRlOiBzdHJpbmcgfCBudW1iZXIgfCBEYXRlKSB7XHJcbiAgICAgICAgY29uc3QgZCA9IHRoaXMuZ2V0RGF0ZShkYXRlKTtcclxuICAgICAgICBpZiAoZCkge1xyXG4gICAgICAgICAgICBjb25zdCBtb250aCA9IGQuZ2V0TW9udGgoKTtcclxuICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IobW9udGggLyAzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5bmn5DmnIjnmoTlpKnmlbBcclxuICAgICAqIEBwYXJhbSB5ZWFyXHJcbiAgICAgKiBAcGFyYW0gbW9udGhcclxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBnZXREYXlzSW5Nb250aCh5ZWFyOiBudW1iZXIsIG1vbnRoOiBudW1iZXIpIHtcclxuICAgICAgICBtb250aCsrO1xyXG4gICAgICAgIGNvbnN0IHRlbXAgPSBuZXcgRGF0ZSh5ZWFyLCBtb250aCwgMCk7XHJcbiAgICAgICAgcmV0dXJuIHRlbXAuZ2V0RGF0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5pel5pyf5a6e5L6LXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bWJlciB8IERhdGV9IGRhdGVcclxuICAgICAqIEByZXR1cm5zIHtEYXRlfVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZ2V0RGF0ZShkYXRlOiBzdHJpbmcgfCBudW1iZXIgfCBEYXRlKSB7XHJcbiAgICAgICAgbGV0IGQ6IERhdGU7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRlID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBkID0gbmV3IERhdGUoZGF0ZSk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZGF0ZSA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgZCA9IG5ldyBEYXRlKGRhdGUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGQgPSBkYXRlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPluW9k+WJjeaXpeacn+WIsOS5i+WJjeafkOS4gOW5tOeahOWto+W6puS/oeaBryjlkI3np7Dku6Xlj4ptaW5EYXRl44CBbWF4RGF0ZSlcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgbnVtYmVyIHwgRGF0ZX0gZWFybHlZZWFyIOacgOaXqeeahOW5tOS7vVxyXG4gICAgICogQHJldHVybnMge3sgZGVzOiBzdHJpbmcsIG1pbkRhdGU6IG51bWJlciwgbWF4RGF0ZTogbnVtYmVyIH1bXX1cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGdldEVhcmx5UXVhcnRzSW5mbyhlYXJseVllYXI6IG51bWJlcikge1xyXG4gICAgICAgIGNvbnN0IGRhdGVJdGVtczogeyBkZXM6IHN0cmluZywgbWluRGF0ZTogbnVtYmVyLCBtYXhEYXRlOiBudW1iZXIgfVtdID0gW107XHJcbiAgICAgICAgY29uc3QgY3VycmVudFllYXIgPSBEYXRlVXRpbC5nZXRDdXJyZW50WWVhcigpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSBjdXJyZW50WWVhcjsgaSA+PSBlYXJseVllYXI7IGktLSkge1xyXG4gICAgICAgICAgICBsZXQgayA9IDQ7IC8vIOm7mOiupOesrOWbm+Wto+W6plxyXG4gICAgICAgICAgICBpZiAoaSA9PT0gY3VycmVudFllYXIpIHtcclxuICAgICAgICAgICAgICAgIGsgPSBEYXRlVXRpbC5nZXRRdWFydGVyKG5ldyBEYXRlKCkpICsgMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gazsgaiA+PSAxOyBqLS0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGVTdHIgPSBgJHtpfS8ke2ogKiAzfS8wMWA7XHJcbiAgICAgICAgICAgICAgICBkYXRlSXRlbXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVzOiBpICsgJ+W5tOesrCcgKyBqICsgJ+Wto+W6picsXHJcbiAgICAgICAgICAgICAgICAgICAgbWluRGF0ZTogRGF0ZVV0aWwuZ2V0RWFybGllc3RTZWNvbmRTdGFtcEluUXVhcnRlcihkYXRlU3RyKSxcclxuICAgICAgICAgICAgICAgICAgICBtYXhEYXRlOiBEYXRlVXRpbC5nZXRMYXRlc3RTZWNvbmRTdGFtcEluUXVhcnRlcihkYXRlU3RyKVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGRhdGVJdGVtcztcclxuICAgIH1cclxufVxyXG4iXX0=