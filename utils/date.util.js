"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var DateUtil = (function () {
    function DateUtil() {
    }
    DateUtil.getTimeSecondStamp = function (date) {
        var d = this.getDate(date);
        return d ? d.getTime() / 1000 : 0;
    };
    DateUtil.getCurTimeSecondStamp = function () {
        return new Date().getTime() / 1000;
    };
    DateUtil.getLatestSecondStampInDay = function (date) {
        return this.getLatestTimeInDay(date) ? this.getLatestTimeInDay(date).getTime() / 1000 : 0;
    };
    DateUtil.getEarliestSecondStampInDay = function (date) {
        return this.getEarliestTimeInDay(date) ? this.getEarliestTimeInDay(date).getTime() / 1000 : 0;
    };
    DateUtil.getEarliestSecondStampInMonth = function (date) {
        return this.getEarliestTimeInMonth(date) ? this.getEarliestTimeInMonth(date).getTime() / 1000 : 0;
    };
    DateUtil.getLatestSecondStampInMonth = function (date) {
        return this.getLatestTimeInMonth(date) ? this.getLatestTimeInMonth(date).getTime() / 1000 : 0;
    };
    DateUtil.getEarliestSecondStampInQuarter = function (date) {
        return this.getEarliestTimeInQuarter(date) ? this.getEarliestTimeInQuarter(date).getTime() / 1000 : 0;
    };
    DateUtil.getLatestSecondStampInQuarter = function (date) {
        return this.getLatestTimeInQuarter(date) ? this.getLatestTimeInQuarter(date).getTime() / 1000 : 0;
    };
    DateUtil.getCurrentYear = function () {
        return new Date().getFullYear();
    };
    DateUtil.getCurrentMonth = function () {
        return new Date().getMonth();
    };
    DateUtil.getCurrentDay = function () {
        return new Date().getDay();
    };
    DateUtil.getLatestTimeInDay = function (date) {
        var d = this.getDate(date);
        if (d) {
            d.setHours(23, 59, 59, 0);
        }
        return d;
    };
    DateUtil.getEarliestTimeInDay = function (date) {
        var d = this.getDate(date);
        if (d) {
            d.setHours(0, 0, 0, 0);
        }
        return d;
    };
    DateUtil.getEarliestTimeInMonth = function (date) {
        var d = this.getDate(date);
        if (d) {
            d.setDate(1);
            d.setHours(0, 0, 0, 0);
        }
        return d;
    };
    DateUtil.getLatestTimeInMonth = function (date) {
        var d = this.getDate(date);
        if (d) {
            d.setDate(this.getDaysInMonth(d.getFullYear(), d.getMonth()));
            d.setHours(23, 59, 59, 0);
        }
        return d;
    };
    DateUtil.getEarliestTimeInQuarter = function (date) {
        var d = this.getDate(date);
        if (d) {
            d.setMonth(this.getEarliestMonthInQuarter(date));
            d.setDate(1);
            d.setHours(0, 0, 0, 0);
        }
        return d;
    };
    DateUtil.getLatestTimeInQuarter = function (date) {
        var d = this.getDate(date);
        if (d) {
            d.setMonth(this.getLatestMonthInQuarter(date));
            d.setDate(this.getDaysInMonth(d.getFullYear(), d.getMonth()));
            d.setHours(23, 59, 59, 0);
        }
        return d;
    };
    DateUtil.getDateStr = function (date, sFormat) {
        date = date ? date : new Date();
        sFormat = sFormat ? sFormat : 'yyyy-MM-dd';
        var time = {
            Year: 0,
            TYear: '0',
            Month: 0,
            TMonth: '0',
            Day: 0,
            TDay: '0',
            Hour: 0,
            THour: '0',
            hour: 0,
            Thour: '0',
            Minute: 0,
            TMinute: '0',
            Second: 0,
            TSecond: '0',
            Millisecond: 0
        };
        time.Year = date.getFullYear();
        time.TYear = String(time.Year).substr(2);
        time.Month = date.getMonth() + 1;
        time.TMonth = time.Month < 10 ? '0' + time.Month : String(time.Month);
        time.Day = date.getDate();
        time.TDay = time.Day < 10 ? '0' + time.Day : String(time.Day);
        time.Hour = date.getHours();
        time.THour = time.Hour < 10 ? '0' + time.Hour : String(time.Hour);
        time.hour = time.Hour < 13 ? time.Hour : time.Hour - 12;
        time.Thour = time.hour < 10 ? '0' + time.hour : String(time.hour);
        time.Minute = date.getMinutes();
        time.TMinute = time.Minute < 10 ? '0' + time.Minute : String(time.Minute);
        time.Second = date.getSeconds();
        time.TSecond = time.Second < 10 ? '0' + time.Second : String(time.Second);
        time.Millisecond = date.getMilliseconds();
        return sFormat.replace(/yyyy/ig, String(time.Year))
            .replace(/yyy/ig, String(time.Year))
            .replace(/yy/ig, time.TYear)
            .replace(/y/ig, time.TYear)
            .replace(/MM/g, time.TMonth)
            .replace(/M/g, String(time.Month))
            .replace(/dd/ig, time.TDay)
            .replace(/d/ig, String(time.Day))
            .replace(/HH/g, time.THour)
            .replace(/H/g, String(time.Hour))
            .replace(/hh/g, time.Thour)
            .replace(/h/g, String(time.hour))
            .replace(/mm/g, time.TMinute)
            .replace(/m/g, String(time.Minute))
            .replace(/ss/ig, time.TSecond)
            .replace(/s/ig, String(time.Second))
            .replace(/fff/ig, String(time.Millisecond));
    };
    DateUtil.getTimeAgo = function (oldTime) {
        var minute = 1000 * 60;
        var hour = minute * 60;
        var day = hour * 24;
        var month = day * 30;
        var year = day * 365;
        var now = new Date().getTime();
        var old = oldTime.getTime();
        var diffValue = now - old;
        var yearC = diffValue / year;
        var monthC = diffValue / month;
        var weekC = diffValue / (7 * day);
        var dayC = diffValue / day;
        var hourC = diffValue / hour;
        var minC = diffValue / minute;
        if (yearC >= 1) {
            return Math.floor(monthC) + '年前';
        }
        else if (monthC >= 1) {
            return Math.floor(monthC) + '个月前';
        }
        else if (weekC >= 1) {
            return Math.floor(weekC) + '周前';
        }
        else if (dayC >= 1) {
            return Math.floor(dayC) + '天前';
        }
        else if (hourC >= 1) {
            return Math.floor(hourC) + '小时前';
        }
        else if (minC >= 1) {
            return Math.floor(minC) + '分钟前';
        }
        else {
            return '刚刚';
        }
    };
    DateUtil.getServealTimeAgo = function (oldTime) {
        var minute = 1000 * 60;
        var hour = minute * 60;
        var day = hour * 24;
        var month = day * 30;
        var year = day * 365;
        var now = new Date().getTime();
        var old = oldTime.getTime();
        var diffValue = now - old;
        var yearC = diffValue / year;
        var monthC = diffValue / month;
        var dayC = diffValue / day;
        var hourC = diffValue / hour;
        var minC = diffValue / minute;
        if (yearC >= 2) {
            return this.getDateStr(oldTime, 'yyyy-MM-dd HH:mm:ss');
        }
        else if (yearC >= 1) {
            return Math.floor(yearC) + '年前';
        }
        else if (monthC >= 1) {
            return Math.floor(monthC) + '月前';
        }
        else if (dayC >= 1) {
            return Math.floor(dayC) + '天前';
        }
        else if (hourC >= 1) {
            return Math.floor(hourC) + '小时前';
        }
        else if (minC >= 1) {
            return Math.floor(minC) + '分钟前';
        }
        else {
            return '刚刚';
        }
    };
    DateUtil.getEarliestMonthInQuarter = function (date) {
        return this.getQuarter(date) * 3;
    };
    DateUtil.getLatestMonthInQuarter = function (date) {
        return this.getQuarter(date) * 3 + 2;
    };
    DateUtil.getQuarter = function (date) {
        var d = this.getDate(date);
        if (d) {
            var month = d.getMonth();
            return Math.floor(month / 3);
        }
        return 0;
    };
    DateUtil.getDaysInMonth = function (year, month) {
        month++;
        var temp = new Date(year, month, 0);
        return temp.getDate();
    };
    DateUtil.getDate = function (date) {
        var d;
        if (typeof date === 'string') {
            d = new Date(date);
        }
        else if (typeof date === 'number') {
            d = new Date(date);
        }
        else {
            d = date;
        }
        return d;
    };
    DateUtil.getEarlyQuartsInfo = function (earlyYear) {
        var dateItems = [];
        var currentYear = DateUtil.getCurrentYear();
        for (var i = currentYear; i >= earlyYear; i--) {
            var k = 4;
            if (i === currentYear) {
                k = DateUtil.getQuarter(new Date()) + 1;
            }
            for (var j = k; j >= 1; j--) {
                var dateStr = i + "/" + j * 3 + "/01";
                dateItems.push({
                    des: i + '年第' + j + '季度',
                    minDate: DateUtil.getEarliestSecondStampInQuarter(dateStr),
                    maxDate: DateUtil.getLatestSecondStampInQuarter(dateStr)
                });
            }
        }
        return dateItems;
    };
    return DateUtil;
}());
exports.DateUtil = DateUtil;
//# sourceMappingURL=data:application/json;base64,